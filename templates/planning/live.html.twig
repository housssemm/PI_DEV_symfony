{% extends 'base.html.twig' %}

{% block title %}Diffusion en direct - Coach{% endblock %}

{% block stylesheets %}
    <style>
        body {
            background: #151515 !important;
        }
    </style>
{% endblock %}

{% block body %}
    <div class="container mt-4" style="color: #fff;">
        <h2 style="color: #fff;">üé• Diffusion en direct : {{ seance.titre }}</h2>
        <p style="color: #fff;">{{ seance.description }}</p>

        <div id="local-player" style="width: 100%; height: 500px; background: #000; border: 1px solid #fff;"></div>

        <p class="mt-3"><strong>Canal :</strong> {{ channelName }}</p>
        <p><strong>Votre r√¥le :</strong> Coach (diffuseur)</p>

        <!-- Boutons -->
        <div class="mt-3">
            <button id="startBtn" class="btn btn-success">‚ñ∂Ô∏è D√©marrer le Live</button>
            <button id="stopBtn" class="btn btn-danger" disabled>‚õî Arr√™ter le Live</button>
        </div>
    </div>

    <!-- Agora SDK -->
    <script src="https://download.agora.io/sdk/release/AgoraRTC_N.js"></script>
    <script>
        const client = AgoraRTC.createClient({ mode: "live", codec: "h264" });

        const appId = "{{ appId }}";
        const token = "{{ token }}";
        const channel = "{{ channelName }}";
        const uid = "{{ app.user.id }}";

        let localTracks = [];

        // Enhanced video encoding parameters
        const videoEncoderConfig = {
            width: 1920,  // 1080p resolution
            height: 1080,
            frameRate: 30, // Higher frame rate for smoother video
            bitrateMin: 1200, // Increased minimum bitrate for 1080p
            bitrateMax: 3000, // Increased maximum bitrate for better quality
            codec: "h264"
        };

        // Enable hardware acceleration
        AgoraRTC.setParameter("ENCODE_WITH_SYSENCODER", true);

        async function startLive() {
            try {
                await client.join(appId, channel, token, uid);
                await client.setClientRole("host");

                // Create tracks with enhanced settings and enable adaptation
                localTracks = await AgoraRTC.createMicrophoneAndCameraTracks({
                    video: videoEncoderConfig,
                    encoderConfig: "high_quality" // Use high-quality preset
                });

                localTracks[1].play("local-player"); // Video
                await client.publish(localTracks);

                // Log stats for debugging
                client.on("stream-published", () => {
                    console.log("Stream published. Checking stats...");
                    client.getRTCStats().then(stats => {
                        console.log("RTC Stats:", stats);
                    });
                });

                console.log("‚úÖ Live d√©marr√©.");
                document.getElementById('startBtn').disabled = true;
                document.getElementById('stopBtn').disabled = false;
            } catch (error) {
                console.error("‚ùå Erreur au d√©marrage du live :", error);
            }
        }

        async function stopLive() {
            try {
                for (let track of localTracks) {
                    track.stop();
                    track.close();
                }
                await client.leave();
                console.log("üî¥ Live arr√™t√©.");

                document.getElementById('startBtn').disabled = false;
                document.getElementById('stopBtn').disabled = true;
            } catch (error) {
                console.error("‚ùå Erreur √† l'arr√™t du live :", error);
            }
        }

        document.getElementById('startBtn').addEventListener('click', startLive);
        document.getElementById('stopBtn').addEventListener('click', stopLive);
    </script>
{% endblock %}