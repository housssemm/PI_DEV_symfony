{# templates/planning/add_seance.html.twig #}
{% block stylesheets %}
    <style>
        /* Styles existants inchang√©s */
        .form-header {
            text-align: center;
            margin-bottom: 25px;
        }
        #videoFileGroup {
            display: none; /* Cach√© par d√©faut */
        }
        .form-header h2 {
            color: #ff6600;
            font-size: 1.8rem;
            font-weight: 600;
            margin-bottom: 10px;
        }

        .form-divider {
            height: 2px;
            background: linear-gradient(to right, transparent, #ff6600, transparent);
            width: 80%;
            margin: 0 auto;
        }

        .form-container {
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .modal-form {
            width: 100%;
            max-width: 700px;
            background: rgb(239, 237, 237);
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 0 20px rgba(255, 255, 255, 0.49);
        }
        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
            font-weight: bold;
            color: #ff6600;
        }
        .form-control, .form-select {
            width: 100%;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 5px;
            background-color: #f9f9f9;
            color: #333;
            transition: border-color 0.3s ease;
        }

        .form-control:focus, .form-select:focus {
            border-color: #ff6600;
            outline: none;
        }

        .btn-primary {
            background-color: #ff6600;
            border: none;
            padding: 12px 20px;
            font-size: 16px;
            color: white;
            border-radius: 5px;
            cursor: pointer;
            width: 100%;
            transition: background-color 0.3s ease;
        }

        .btn-primary:hover {
            background-color: #e64a00;
        }

        #uploadBtn {
            display: block;
            width: 100%;
            text-align: center;
            margin-top: 15px;
            background-color: #ff6600;
            border: none;
            color: white;
            padding: 12px;
            font-size: 16px;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        #uploadBtn:hover {
            background-color: #e64a00;
        }

        #videoFileContainer input[type="file"] {
            display: none;
        }

        @media (min-width: 768px) {
            .form-row {
                display: flex;
                justify-content: space-between;
                gap: 20px;
            }
            .form-header h2 {
                font-size: 1.5rem;
            }
            .form-row .form-group {
                flex: 1;
            }
        }
        body {
            background: #151515 !important;
        }

        .invalid-feedback {
            display: block;
            color: #dc3545;
        }
        .info-message {
            color: blue;
            margin-top: 5px;
            font-style: italic;
        }
        .flash-message {
            margin-bottom: 15px;
            padding: 10px;
            border-radius: 5px;
        }
        .flash-success {
            background-color: #d4edda;
            color: #155724;
        }
        .flash-error {
            background-color: #f8d7da;
            color: #721c24;
        }
    </style>
{% endblock %}

{% block body %}
    <div class="form-container">
        {# Affichage des messages flash pour d√©bogage #}
        {% for label, messages in app.flashes %}
            {% for message in messages %}
                <div class="flash-message flash-{{ label }}">{{ message }}</div>
            {% endfor %}
        {% endfor %}

        {# D√©but du formulaire Symfony avec chemin et attributs #}
        {{ form_start(form, {'action': path('addseance'), 'attr': {'novalidate': 'novalidate', 'class': 'modal-form'}}) }}

        {# En-t√™te du formulaire #}
        <div class="form-header">
            <h2>Ajouter une Nouvelle S√©ance</h2>
            <div class="form-divider"></div>
        </div>

        {# Ligne pour Titre et Description #}
        <div class="form-row">
            <div class="form-group">
                {{ form_label(form.Titre, 'Titre') }}
                {{ form_widget(form.Titre, {'attr': {'class': 'form-control'}}) }}
                <div class="invalid-feedback">{{ form_errors(form.Titre) }}</div>
            </div>

            <div class="form-group">
                {{ form_label(form.Description, 'Description') }}
                {{ form_widget(form.Description, {'attr': {'class': 'form-control'}}) }}
                <div class="invalid-feedback">{{ form_errors(form.Description) }}</div>
            </div>
        </div>

        {# Ligne pour Date et Type #}
        <div class="form-row">
            <div class="form-group">
                {{ form_label(form.Date, 'Date') }}
                {{ form_widget(form.Date, {'attr': {'class': 'form-control'}}) }}
                <div class="invalid-feedback">{{ form_errors(form.Date) }}</div>
            </div>

            <div class="form-group">
                {{ form_label(form.Type, 'Type') }}
                {{ form_widget(form.Type, {'attr': {'class': 'form-select', 'id': 'seance_type'}}) }}
                <div class="invalid-feedback">{{ form_errors(form.Type) }}</div>
            </div>
        </div>

        <div class="form-row">
            <div class="form-group" style="flex: 1;">
                {{ form_label(form.LienVideo, 'Lien') }}
                {{ form_widget(form.LienVideo, {'attr': {'class': 'form-control', 'id': 'seance_lienVideo'}}) }}
                <div class="info-message">Le lien sera g√©n√©r√© automatiquement pour une s√©ance "En Direct".</div>
                <div class="invalid-feedback">{{ form_errors(form.LienVideo) }}</div>
            </div>

            <div class="form-group" id="videoFileGroup" style="flex: 1; display: none;">
                <button type="button" id="uploadBtn" class="btn btn-primary">
                    üìÅ Charger une vid√©o
                </button>
                {{ form_widget(form.VideoFile, {'attr': {'style': 'display: none;', 'id': 'seance_videoFile'}}) }}
                <div class="invalid-feedback">{{ form_errors(form.VideoFile) }}</div>
            </div>
        </div>

        {# Ligne pour Heure D√©but et Heure Fin #}
        <div class="form-row">
            <div class="form-group">
                {{ form_label(form.heureDebut, 'Heure D√©but') }}
                {{ form_widget(form.heureDebut, {'attr': {'class': 'form-control time-picker'}}) }}
                <div class="invalid-feedback">{{ form_errors(form.heureDebut) }}</div>
            </div>

            <div class="form-group">
                {{ form_label(form.heureFin, 'Heure Fin') }}
                {{ form_widget(form.heureFin, {'attr': {'class': 'form-control time-picker'}}) }}
                <div class="invalid-feedback">{{ form_errors(form.heureFin) }}</div>
            </div>
        </div>

        {# Ligne pour Adh√©rent #}
        <div class="form-row">
            <div class="form-group">
                {{ form_label(form.adherent, 'Adh√©rent') }}
                {{ form_widget(form.adherent, {'attr': {'class': 'form-select'}}) }}
                <div class="invalid-feedback">{{ form_errors(form.adherent) }}</div>
            </div>
        </div>

        {# Bouton de soumission #}
        <button type="submit" class="btn btn-primary">Ajouter</button>

        {# Fin du formulaire #}
        {{ form_end(form) }}
    </div>
{% endblock %}

{% block javascripts %}
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Tentative de s√©lection des √©l√©ments avec getElementById
            let typeSeance = document.getElementById('seance_type');
            let videoFileGroup = document.getElementById('videoFileGroup');
            let uploadBtn = document.getElementById('uploadBtn');
            let videoFileInput = document.getElementById('seance_videoFile');
            let lienVideo = document.getElementById('seance_lienVideo');

            // Fallback avec querySelector si getElementById √©choue
            if (!typeSeance) {
                typeSeance = document.querySelector('select[name$="[Type]"]');
                console.warn('Fallback pour typeSeance:', typeSeance);
            }
            if (!videoFileGroup) {
                videoFileGroup = document.getElementById('videoFileGroup'); // Pas de fallback direct, v√©rifie le DOM
                console.warn('videoFileGroup non trouv√©');
            }
            if (!uploadBtn) {
                uploadBtn = document.querySelector('#uploadBtn');
                console.warn('Fallback pour uploadBtn:', uploadBtn);
            }
            if (!videoFileInput) {
                videoFileInput = document.querySelector('input[name$="[VideoFile]"]');
                console.warn('Fallback pour videoFileInput:', videoFileInput);
            }
            if (!lienVideo) {
                lienVideo = document.querySelector('input[name$="[LienVideo]"]');
                console.warn('Fallback pour lienVideo:', lienVideo);
            }

            // Logs pour d√©bogage
            console.log('typeSeance:', typeSeance);
            console.log('videoFileGroup:', videoFileGroup);
            console.log('uploadBtn:', uploadBtn);
            console.log('videoFileInput:', videoFileInput);
            console.log('lienVideo:', lienVideo);

            // V√©rification finale des √©l√©ments
            if (!typeSeance || !videoFileGroup || !uploadBtn || !videoFileInput || !lienVideo) {
                console.error('Un ou plusieurs √©l√©ments sont manquants dans le DOM. V√©rifiez les IDs ou le rendu HTML.');
                return;
            }

            // Fonction pour g√©n√©rer un lien temporaire pour "En Direct"
            function generateTemporaryLink() {
                const baseUrl = '{{ app.request.schemeAndHttpHost }}' || 'http://localhost:8000'; // Fallback local
                const tempLink = `${baseUrl}/seance/livestream/temp`;
                lienVideo.value = tempLink;
                lienVideo.readOnly = true;
                console.log('Lien temporaire g√©n√©r√©:', tempLink);
            }

            // Fonction pour g√©rer l'affichage conditionnel et les actions
            function toggleVideoUpload() {
                console.log('Type de s√©ance s√©lectionn√©:', typeSeance.value);
                if (typeSeance.value === 'ENREGISTRE') {
                    videoFileGroup.style.display = 'flex';
                    lienVideo.value = ''; // Vider le champ pour "Enregistr√©"
                    lienVideo.readOnly = false; // Permettre la modification
                    console.log('Mode "Enregistr√©" activ√©, bouton affich√©');
                } else if (typeSeance.value === 'EN_DIRECT') {
                    videoFileGroup.style.display = 'none';
                    generateTemporaryLink(); // G√©n√©rer et afficher le lien temporaire
                    console.log('Mode "En Direct" activ√©, lien g√©n√©r√©');
                } else {
                    videoFileGroup.style.display = 'none';
                    lienVideo.value = '';
                    lienVideo.readOnly = false;
                    console.log('Aucun mode s√©lectionn√©');
                }
            }

            // √âv√©nement pour le clic sur le bouton "Charger une vid√©o"
            uploadBtn.addEventListener('click', function (e) {
                e.preventDefault();
                console.log('Bouton "Charger une vid√©o" cliqu√©');
                videoFileInput.click(); // Ouvre la fen√™tre de s√©lection de fichier
            });

            // √âv√©nement lorsque un fichier est s√©lectionn√©
            videoFileInput.addEventListener('change', function () {
                console.log('√âv√©nement change d√©clench√© sur videoFileInput');
                if (videoFileInput.files.length > 0) {
                    const fileName = videoFileInput.files[0].name;
                    lienVideo.value = fileName; // Mettre le nom du fichier dans le champ Lien
                    console.log('Nom du fichier affich√© dans le champ Lien:', fileName);
                } else {
                    console.log('Aucun fichier s√©lectionn√©');
                }
            });

            // D√©tection de changement sur le select Type
            typeSeance.addEventListener('change', function () {
                console.log('Changement d√©tect√© sur typeSeance');
                toggleVideoUpload();
            });

            // Initialisation au chargement de la page
            toggleVideoUpload();
        });
    </script>
{% endblock %}