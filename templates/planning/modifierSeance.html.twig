{# Bloc des styles CSS #}
{% block stylesheets %}
    <style>
        /* Styles pour l'en-t√™te du formulaire */
        .form-header {
            text-align: center;
            margin-bottom: 25px;
        }
        #videoFileGroup {
            display: none; /* Cach√© par d√©faut */
        }
        .form-header h2 {
            color: #ff6600;
            font-size: 1.8rem;
            font-weight: 600;
            margin-bottom: 10px;
        }

        .form-divider {
            height: 2px;
            background: linear-gradient(to right, transparent, #ff6600, transparent);
            width: 80%;
            margin: 0 auto;
        }

        /* Conteneur principal du formulaire */
        .form-container {
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .modal-form {
            width: 100%;
            max-width: 700px;
            background: rgba(255, 255, 255, 0.95);
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 0 20px rgb(205, 87, 24);
        }
        /* Styles pour les groupes de champs */
        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
            font-weight: bold;
            color: #ff6600;
        }
        .form-control, .form-select {
            width: 100%;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 5px;
            background-color: #f9f9f9;
            color: #333;
            transition: border-color 0.3s ease;
        }

        .form-control:focus, .form-select:focus {
            border-color: #ff6600;
            outline: none;
        }

        /* Styles pour les boutons */
        .btn-primary {
            background-color: #ff6600;
            border: none;
            padding: 12px 20px;
            font-size: 16px;
            color: white;
            border-radius: 5px;
            cursor: pointer;
            width: 100%;
            transition: background-color 0.3s ease;
        }

        .btn-primary:hover {
            background-color: #e64a00;
        }

        /* Bouton sp√©cifique pour le chargement de fichier */
        #uploadBtn {
            display: block;
            width: 100%;
            text-align: center;
            margin-top: 15px;
            background-color: #ff6600;
            border: none;
            color: white;
            padding: 12px;
            font-size: 16px;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        #uploadBtn:hover {
            background-color: #e64a00;
        }

        #videoFileContainer input[type="file"] {
            display: none;
        }

        /* Styles responsives */
        @media (min-width: 768px) {
            .form-row {
                display: flex;
                justify-content: space-between;
                gap: 20px;
            }
            .form-header h2 {
                font-size: 1.5rem;
            }
            .form-row .form-group {
                flex: 1;
            }
        }
        /* Style de fond global */
        body {
            background: linear-gradient(rgba(21, 21, 21, 0.85), rgba(21, 21, 21, 0.85)),
            url('{{ asset('img/1234.jpg') }}') center/cover no-repeat fixed !important;
            font-family: 'Arial', sans-serif;
            margin: 0;
        }

        /* Messages d'erreur */
        .invalid-feedback {
            display: block;
            color: #dc3545;
        }
    </style>
{% endblock %}
{# Bloc principal du contenu #}
{% block body %}
    <div class="form-container">
        {# D√©but du formulaire Symfony avec chemin et attributs #}
        {{ form_start(form, {'action': path('app_seance_update', {'id': seance.id}), 'attr': {'novalidate': 'novalidate', 'class': 'modal-form'}}) }}

        {# En-t√™te du formulaire #}
        <div class="form-header">
            <h2>Modifier la S√©ance</h2>
            <div class="form-divider"></div>
        </div>

        {# Ligne pour Titre et Description #}
        <div class="form-row">
            <div class="form-group">
                {{ form_label(form.Titre, 'Titre') }}
                {{ form_widget(form.Titre, {'attr': {'class': 'form-control'}}) }}
                <div class="invalid-feedback">{{ form_errors(form.Titre) }}</div>
            </div>

            <div class="form-group">
                {{ form_label(form.Description, 'Description') }}
                {{ form_widget(form.Description, {'attr': {'class': 'form-control'}}) }}
                <div class="invalid-feedback">{{ form_errors(form.Description) }}</div>
            </div>
        </div>

        {# Ligne pour Date et Type #}
        <div class="form-row">
            <div class="form-group">
                {{ form_label(form.Date, 'Date') }}
                {{ form_widget(form.Date, {'attr': {'class': 'form-control'}}) }}
                <div class="invalid-feedback">{{ form_errors(form.Date) }}</div>
            </div>

            <div class="form-group">
                {{ form_label(form.Type, 'Type') }}
                {{ form_widget(form.Type, {'attr': {'class': 'form-select', 'id': 'typeSeance'}}) }}
                <div class="invalid-feedback">{{ form_errors(form.Type) }}</div>
            </div>
        </div>

        <div class="form-row">
            <div class="form-group" style="flex: 1;">
                {{ form_label(form.LienVideo, 'Lien Vid√©o') }}
                {{ form_widget(form.LienVideo, {'attr': {'class': 'form-control'}}) }}
            </div>

            <div class="form-group" id="videoFileGroup" style="flex: 1; display: none;">
                <button type="button" id="uploadBtn" class="btn btn-primary">
                    üìÅ Charger une vid√©o
                </button>
                {{ form_widget(form.VideoFile, {'attr': {'style': 'display: none;'}}) }}
            </div>
        </div>

        {# Ligne pour Heure D√©but et Heure Fin #}
        <div class="form-row">
            <div class="form-group">
                {{ form_label(form.heureDebut, 'Heure D√©but') }}
                {{ form_widget(form.heureDebut, {'attr': {'class': 'form-control time-picker'}}) }}
                <div class="invalid-feedback">{{ form_errors(form.heureDebut) }}</div>
            </div>

            <div class="form-group">
                {{ form_label(form.heureFin, 'Heure Fin') }}
                {{ form_widget(form.heureFin, {'attr': {'class': 'form-control time-picker'}}) }}
                <div class="invalid-feedback">{{ form_errors(form.heureFin) }}</div>
            </div>
        </div>

        {# Ligne pour Coach et Adh√©rent #}
        <div class="form-row" style="display: none;">
            <div class="form-group">
                {{ form_label(form.coach, 'Coach') }}
                {{ form_widget(form.coach, {'attr': {'class': 'form-select'}}) }}
                <div class="invalid-feedback">{{ form_errors(form.coach) }}</div>
            </div>

            <div class="form-group" style="display: none;" >
                {{ form_label(form.adherent, 'Adh√©rent') }}
                {{ form_widget(form.adherent, {'attr': {'class': 'form-select'}}) }}
                <div class="invalid-feedback">{{ form_errors(form.adherent) }}</div>
            </div>
        </div>

        {# Champ Planning #}
        <div class="form-group" style="display: none;">
            {{ form_label(form.planning, 'Planning') }}
            {{ form_widget(form.planning, {'attr': {'class': 'form-select'}}) }}
            <div class="invalid-feedback">{{ form_errors(form.planning) }}</div>
        </div>

        {# Bouton de soumission #}
        <button type="submit" class="btn btn-primary">modifier</button>

        {# Fin du formulaire #}
        {{ form_end(form) }}
    </div>
{% endblock %}
{% block javascripts %}
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const typeSeance = document.querySelector('[name$="[Type]"]');

            const videoFileGroup = document.getElementById('videoFileGroup');
            const uploadBtn = document.getElementById('uploadBtn');
            const videoFileInput = document.querySelector('input[name$="[VideoFile]"]');
            const lienVideo = document.querySelector('[name$="[LienVideo]"]');

            // Fonction d'affichage conditionnel
            function toggleVideoUpload() {
                if (typeSeance.value === 'ENREGISTRE') {
                    console.log("üîç Valeur actuelle de typeSeance :", typeSeance.value);
                    videoFileGroup.style.display = 'flex';
                } else {
                    videoFileGroup.style.display = 'none';
                }
            }
            // Clic sur bouton d√©clenche l'input file
            uploadBtn.addEventListener('click', function (e) {
                e.preventDefault();
                videoFileInput.click();
            });
// Lorsqu'un fichier est s√©lectionn√©, on met √† jour le champ Lien Vid√©o
            videoFileInput.addEventListener('change', function () {
                if (videoFileInput.files.length > 0) {
                    // Ici on r√©cup√®re le nom du fichier s√©lectionn√©
                    const fileName = videoFileInput.files[0].name;
                    console.log("Fichier s√©lectionn√© :", fileName);
                    // On affiche le nom dans le champ Lien Vid√©o
                    lienVideo.value = fileName;
                }
            });
            // D√©tection de changement sur le select
            typeSeance.addEventListener('change', toggleVideoUpload);
            // Initialisation √† l'ouverture de la page
            toggleVideoUpload();
        });
    </script>
{% endblock %}